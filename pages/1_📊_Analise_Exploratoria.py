import streamlit as st
import pandas as pd
import plotly.express as px

from Home import EXCEL_FILE, corrigir_inflacao, classificar_por_faixa

# ConfiguraÃ§Ã£o da pÃ¡gina
st.title("ðŸ“Š AnÃ¡lise ExploratÃ³ria de Smartphones")
st.info("ðŸ’¡ **Todas as anÃ¡lises de preÃ§o utilizam valores corrigidos pela inflaÃ§Ã£o atravÃ©s do Ã­ndice Big Mac para maior precisÃ£o temporal!**")

try:
    cotacao_dolar = 5.68  # ConversÃ£o atualizada
    df = pd.read_excel(EXCEL_FILE)
    df.columns = df.columns.str.strip()
    df['PreÃ§o (USD)'] = df['Launched Price (USA)'].str.replace("USD", "").str.replace(",", "").astype(float)
    df['PreÃ§o (R$)'] = df['PreÃ§o (USD)'].apply(lambda x: round(x * cotacao_dolar, 2))
    df['Ano'] = df['Launched Year']
    df['Marca'] = df['Company Name']
    df['Sistema Operacional'] = df['Sistema Operacional'].str.strip()
    df['Bateria (mAh)'] = df['Battery Capacity'].str.replace("mAh", "").str.replace(",", "").astype(float)
    
    # CorreÃ§Ã£o de inflaÃ§Ã£o
    df['PreÃ§o Corrigido (USD)'] = df.apply(lambda row: corrigir_inflacao(row['PreÃ§o (USD)'], row['Ano']), axis=1)
    df['PreÃ§o Corrigido (R$)'] = df['PreÃ§o Corrigido (USD)'].apply(lambda x: round(x * cotacao_dolar, 2))
    
    # ClassificaÃ§Ã£o por faixa
    df['Faixa'] = df['PreÃ§o Corrigido (USD)'].apply(classificar_por_faixa)

    # Sempre usar preÃ§os corrigidos pela inflaÃ§Ã£o
    coluna_preco = 'PreÃ§o Corrigido (R$)'
    
    st.subheader("ðŸ’² EvoluÃ§Ã£o MÃ©dia dos PreÃ§os por Marca (Corrigido por InflaÃ§Ã£o)")
    marcas_disponiveis = sorted(df['Marca'].dropna().unique())

    st.markdown("**Selecione as marcas que deseja visualizar:**")
    col1, col2, col3 = st.columns(3)
    marcas_selecionadas = []
    for i, marca in enumerate(marcas_disponiveis):
        with [col1, col2, col3][i % 3]:
            if st.checkbox(marca, value=True, key=f"preco_{marca}"):
                marcas_selecionadas.append(marca)

    media_preco = df[df['Marca'].isin(marcas_selecionadas)].groupby(['Marca', 'Ano'])[coluna_preco].mean().reset_index()
    
    fig1 = px.line(media_preco, x='Ano', y=coluna_preco, color='Marca', markers=True,
                    title="PreÃ§o MÃ©dio (Corrigido por InflaÃ§Ã£o) por Marca ao Longo dos Anos")
    fig1.update_traces(line=dict(width=3))
    fig1.add_annotation(
        text="* PreÃ§os corrigidos usando Ã­ndice Big Mac",
        xref="paper", yref="paper", x=0, y=-0.1, showarrow=False
    )
    st.plotly_chart(fig1, use_container_width=True)

    st.subheader("ðŸ“ˆ EvoluÃ§Ã£o da Capacidade MÃ©dia de Bateria por Marca")
    st.markdown("**Selecione as marcas que deseja visualizar:**")
    col4, col5, col6 = st.columns(3)
    marcas_bateria_selecionadas = []
    for i, marca in enumerate(marcas_disponiveis):
        with [col4, col5, col6][i % 3]:
            if st.checkbox(marca, value=True, key=f"bateria_{marca}"):
                marcas_bateria_selecionadas.append(marca)

    media_bateria = df[df['Marca'].isin(marcas_bateria_selecionadas)].groupby(['Marca', 'Ano'])['Bateria (mAh)'].mean().reset_index()
    fig_bateria = px.line(media_bateria, x='Ano', y='Bateria (mAh)', color='Marca', markers=True,
                            title="ðŸ“ˆ Bateria MÃ©dia (mAh) por Marca e Ano")
    fig_bateria.update_traces(line=dict(width=2))
    st.plotly_chart(fig_bateria, use_container_width=True)

    st.subheader("ðŸ’µ EvoluÃ§Ã£o do PreÃ§o MÃ©dio por Sistema Operacional (Corrigido por InflaÃ§Ã£o)")
    media_preco_so = df.groupby(['Sistema Operacional', 'Ano'])[coluna_preco].mean().reset_index()
    fig_so = px.line(media_preco_so, x='Ano', y=coluna_preco, color='Sistema Operacional', markers=True,
                        title="ðŸ’µ PreÃ§o MÃ©dio (Corrigido por InflaÃ§Ã£o) por Sistema Operacional e Ano")
    fig_so.update_traces(line=dict(width=2))
    st.plotly_chart(fig_so, use_container_width=True)

    st.subheader("ðŸ“ˆ VariaÃ§Ã£o Percentual do PreÃ§o (Corrigido por InflaÃ§Ã£o)")
    variacoes = []
    for marca in df['Marca'].dropna().unique():
        dados_marca = df[df['Marca'] == marca].groupby('Ano')[coluna_preco].mean().reset_index().sort_values('Ano')
        if len(dados_marca) > 1:
            preco_inicio = dados_marca.iloc[0][coluna_preco]
            preco_fim = dados_marca.iloc[-1][coluna_preco]
            perc = (preco_fim - preco_inicio) / preco_inicio * 100
            variacoes.append({
                'Marca': marca,
                'Ano Inicial': dados_marca.iloc[0]['Ano'],
                'Ano Final': dados_marca.iloc[-1]['Ano'],
                f'PreÃ§o Inicial (Corrigido)': f"R$ {preco_inicio:.2f}",
                f'PreÃ§o Final (Corrigido)': f"R$ {preco_fim:.2f}",
                'VariaÃ§Ã£o (%)': round(perc, 2),
                'TendÃªncia': 'â†‘ Aumento' if perc > 0 else 'â†“ Queda'
            })
    st.dataframe(pd.DataFrame(variacoes))

    st.subheader("ðŸ“± DistribuiÃ§Ã£o de Sistemas Operacionais")
    so_counts = df['Sistema Operacional'].value_counts().reset_index()
    so_counts.columns = ['Sistema Operacional', 'Quantidade']
    fig2 = px.pie(so_counts, values='Quantidade', names='Sistema Operacional',
                    title='DistribuiÃ§Ã£o de Sistemas Operacionais')
    st.plotly_chart(fig2, use_container_width=True)

    st.subheader("ðŸ“† LanÃ§amentos por Ano")
    lanc_ano = df['Ano'].value_counts().sort_index().reset_index()
    lanc_ano.columns = ['Ano', 'Quantidade']
    fig3 = px.bar(lanc_ano, x='Ano', y='Quantidade',
                    title='Quantidade de Smartphones LanÃ§ados por Ano')
    st.plotly_chart(fig3, use_container_width=True)

    st.subheader("ðŸ’µ PreÃ§o por Sistema Operacional (Corrigido por InflaÃ§Ã£o)")
    fig4 = px.box(df, x='Sistema Operacional', y=coluna_preco,
                    title='DistribuiÃ§Ã£o de PreÃ§os por Sistema Operacional (Corrigido por InflaÃ§Ã£o)')
    st.plotly_chart(fig4, use_container_width=True)

    st.subheader("ðŸ”‹ Capacidade de Bateria por Marca")
    fig5 = px.box(df, x='Marca', y='Bateria (mAh)',
                    title='Capacidade de Bateria por Marca')
    st.plotly_chart(fig5, use_container_width=True)

except Exception as e:
    st.error(f"Erro ao carregar os dados: {e}")